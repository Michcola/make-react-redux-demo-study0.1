{"version":3,"sources":["react-redux.js","Header.js","ThemeSwitch.js","Content.js","index.js"],"names":["connect","mapStateToProps","mapDispatchToProps","WrappedComponent","Connect","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allProps","inherits","createClass","key","value","_this2","store","context","_updateProps","subscribe","stateProps","getState","props","dispatchProps","dispatch","setState","objectSpread","react_default","a","createElement","Component","contextTypes","PropTypes","object","Provider","_Component2","apply","arguments","children","childContextTypes","Header","style","color","themeColor","ThemeSwitch","onSwitchColor","onClick","handleSwitchColor","bind","type","Content","src_ThemeSwitch","reducer","listeners","action","forEach","listener","push","createStore","Index","src_Header","src_Content","ReactDOM","render","react_redux_Provider","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.87614450.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const connect = (mapStateToProps,mapDispatchToProps) => (WrappedComponent) => {\r\n    class Connect extends Component {\r\n      static contextTypes = {\r\n        store: PropTypes.object\r\n      }\r\n  \r\n      constructor () {\r\n        super()\r\n        this.state = { allProps: {} }\r\n      }\r\n  \r\n      componentWillMount () {\r\n        const { store } = this.context\r\n        this._updateProps()\r\n        store.subscribe(() => this._updateProps())\r\n      }\r\n  \r\n      _updateProps () {\r\n        const { store } = this.context\r\n        let stateProps = mapStateToProps\r\n            ? mapStateToProps(store.getState(), this.props)\r\n            :{}// 防止mapStateToProps 没有传入\r\n        let dispatchProps = mapDispatchToProps\r\n            ? mapDispatchToProps(store.dispatch,this.props)\r\n            :{}// 防止mapDispatchToProps 没有传入\r\n        this.setState({\r\n          allProps: { \r\n            ...stateProps,\r\n            ...dispatchProps,\r\n            ...this.props\r\n          }\r\n        })\r\n      }\r\n  \r\n      render () {\r\n        return <WrappedComponent {...this.state.allProps} />\r\n      }\r\n    }\r\n  \r\n    return Connect\r\n  }\r\n\r\nexport class Provider extends Component{\r\n    static propTypes={\r\n        store:PropTypes.object,\r\n        children:PropTypes.any\r\n    }\r\n    static childContextTypes={\r\n        store:PropTypes.object\r\n    }\r\n    getChildContext(){\r\n        return{\r\n            store:this.props.store\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div>{this.props.children}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from \"./react-redux\";\r\n\r\nclass Header extends Component {\r\n  static propTypes = {\r\n    themeColor: PropTypes.string\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <h1 style={{ color: this.props.themeColor }}>React.js 小书</h1>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    themeColor: state.themeColor\r\n  }\r\n}\r\nHeader = connect(mapStateToProps)(Header)\r\n\r\nexport default Header","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from \"./react-redux\";\r\n\r\nclass ThemeSwitch extends Component {\r\n  static propTypes = {\r\n    themeColor: PropTypes.string,\r\n    onSwitchColor:PropTypes.func\r\n  }\r\n\r\n  handleSwitchColor (color) {\r\n    if(this.props.onSwitchColor){\r\n      this.props.onSwitchColor(color)\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <button\r\n          style={{ color: this.props.themeColor }}\r\n          onClick={this.handleSwitchColor.bind(this, 'red')}>Red</button>\r\n        <button\r\n          style={{ color: this.props.themeColor }}\r\n          onClick={this.handleSwitchColor.bind(this, 'blue')}>Blue</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToPros = (state)=>{\r\n  return {\r\n    themeColor:state.themeColor\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSwitchColor:(color) => {\r\n      dispatch({type:'CHANGE_COLOR',themeColor:color})\r\n    }\r\n  }\r\n}\r\nThemeSwitch = connect(mapStateToPros,mapDispatchToProps)(ThemeSwitch)\r\n\r\nexport default ThemeSwitch","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ThemeSwitch from './ThemeSwitch'\r\nimport { connect } from \"./react-redux\";\r\n\r\nclass Content extends Component {\r\n  static propTypes = {\r\n    themeColor: PropTypes.string\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <p style={{ color: this.props.themeColor }}>React.js 小书内容</p>\r\n        <ThemeSwitch />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    themeColor: state.themeColor\r\n  }\r\n}\r\nContent = connect(mapStateToProps)(Content)\r\n\r\nexport default Content","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport Header from './Header'\nimport Content from './Content'\nimport { Provider } from \"./react-redux\";\nimport './index.css'\n\nfunction createStore (reducer) {\n    let state = null\n    const listeners = []\n    const subscribe = (listener) => listeners.push(listener)\n    const getState = () => state\n    const dispatch = (action) => {\n      state = reducer(state, action)\n      listeners.forEach((listener) => listener())\n    }\n    dispatch({}) // 初始化 state\n    return { getState, dispatch, subscribe }\n  }\n  \n  const themeReducer = (state, action) => {\n    if (!state) return {\n      themeColor: 'red'\n    }\n    switch (action.type) {\n      case 'CHANGE_COLOR':\n        return { ...state, themeColor: action.themeColor }\n      default:\n        return state\n    }\n  }\n  \n  const store = createStore(themeReducer)\n\n  class Index extends Component {\n    render () {\n      return (\n        <div>\n          <Header />\n          <Content />\n        </div>\n      )\n    }\n  }\n\nReactDOM.render(\n  <Provider store={store}>\n  <Index />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}